public void make_comb()
    {

        ArrayList<Integer> deck = new ArrayList<Integer>();
        //for (int i = 0;i < 3; i ++) deck.add(i+1);
        for (int i = 0; i < 5; i++) deck.add(i+1);


        int fact = 1;
        for (int i = 2; i < deck.size()+1; i++) fact*=i;

        int[][] test = new int[fact][deck.size()];
        int mf = 0;

        ArrayList<Integer> temp = new ArrayList<>();
        for (int iel = 0; iel < deck.size(); iel++) temp.add(iel+1);

        int[] ml = new int[4];
        for (int i = 0; i < 4; i ++) ml[i] = 0;
        int[] index = new int[4];
        for (int i = 0; i < 4; i ++) index[i] = i;



        for (int qq = index[0]; qq < deck.size(); qq++)
        {


            if (qq != 0)
            {
                temp.clear();
                for (int iel = 0; iel < deck.size(); iel++) temp.add(test[ml[0]][iel]);// TEMP = TEST[0]
                ml[1]+=24;
                ml[2]+=6;
                ml[3]+=2;

                Collections.swap(temp,0, qq);
            }

            for (int i = index[1]; i < deck.size(); i++)
            {

                if (i != index[1])
                {
                    temp.clear();
                    for (int iel = 0; iel < deck.size(); iel++) temp.add(test[ml[1]][iel]);// TEMP = TEST[0]
                    ml[2]+=6;
                    ml[3]+=2;


                    Collections.swap(temp,1, i);
                }

                for (int j = index[2]; j < deck.size(); j++)
                {

                    if (j != 2)
                    {
                        temp.clear();
                        for (int iel = 0; iel < deck.size(); iel++) temp.add(test[ml[2]][iel]);// TEMP = TEST[]
                        ml[3]+=2;


                        Collections.swap(temp,2, j);
                    }

                    for (int k = index[3]; k < deck.size(); k++)
                    {
                        if (k != 3)
                        {
                            temp.clear();
                            for (int iel = 0; iel < deck.size(); iel++) temp.add(test[ml[3]][iel]);

                            Collections.swap(temp,3, k);
                        }
                        for (int m = 0; m < temp.size(); m++) test[mf][m] = temp.get(m);
                        mf++;

                    }
                }
            }
        }




        for (int i = 0; i < fact; i++)  Log.d("FLOP", Integer.toString(i) + ": " + Integer.toString(test[i][0]) + " " + Integer.toString(test[i][1]) + " " + Integer.toString(test[i][2]) + " " + Integer.toString(test[i][3])+ " " + Integer.toString(test[i][4]));

    }